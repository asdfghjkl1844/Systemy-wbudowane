// PIC24FJ128GA010 Configuration Bit Settings
// For more on Configuration Bits, see Section 1.1
// consult your device data sheet
// CONFIG2
#pragma config POSCMOD = XT // XT Oscillator mode selected
#pragma config OSCIOFNC = ON // OSC2/CLKO/RC15 as port I/O (RC15)
#pragma config FCKSM = CSDCMD // Clock Switching and Monitor disabled
#pragma config FNOSC = PRI // Primary Oscillator (XT, HS, EC)
#pragma config IESO = ON // Int Ext Switch Over Mode enabled
// CONFIG1
#pragma config WDTPS = PS32768 // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128 // WDT Prescaler (1:128)
#pragma config WINDIS = ON // Watchdog Timer Window Mode disabled
#pragma config FWDTEN = OFF // Watchdog Timer disabled
#pragma config ICS = PGx2 // Emulator/debugger uses EMUC2/EMUD2
#pragma config GWRP = OFF // Writes to program memory allowed
#pragma config GCP = OFF // Code protection is disabled
#pragma config JTAGEN = OFF // JTAG port is disabled
// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.
#include "xc.h"
#include <libpic30.h>
#include <string.h>
#include "lcd.h"

// Definicja makr tak by kod byl czytelny, przejrzysty, deskryptywny i przyjazny uzytkownikowi
#define FCY 4000000UL // czestotliwosc robocza oscylatora jako polowa czestotliwosci (FNOSC = FRC -> FCY = 4000000)
// Zdefiniowanie poszczegolnych pingów jako odpowiednie makra
#define LCD_E LATDbits.LATD4
#define LCD_RW LATDbits.LATD5
#define LCD_RS LATBbits.LATB15
#define LCD_DATA LATE
// Przypisanie wartosci poszczegolnych komend do wlasciwych makr
#define LCD_CLEAR 0x01 //0b00000001
#define LCD_HOME 0x02 //0b00000010
#define LCD_ON 0x0C //0b00001100
#define LCD_OFF 0x08 //0b00001000
#define LCD_CONFIG 0x38 //0b00111000
#define LCD_CURSOR 0x80 //0b10000000
#define LINE1 0x00
#define LINE2 0x40
#define LCD_CUST_CHAR 0x40 //0b01000000
#define LCD_SHIFT_R 0x1D //0b00011100
#define LCD_SHIFT_L 0x1B //0b00011000

// Definicja funkcji delay w us i ms - operujacych na jednostkach czasu zamiast cykli pracy oscylatora
void __delay_us(unsigned long us){
__delay32(us * FCY / 1000000);
}
void __delay_ms(unsigned long ms){
__delay32(ms * FCY / 1000);
}

// Definicja funkcji wysylajacych komendy (RS = 0) i dane (RS = 1) za
//pomoca magistrali równoleglej (LCD_DATA). Znaki i komendy maja 8 bitów!
void LCD_sendCommand(unsigned char command){
LCD_RW = 0; // Zapis
LCD_RS = 0; // Przesylanie komend
LCD_E = 1; // Otwarcie transmisji danych
LCD_DATA = command;
__delay_us(50); // Opoznienie konieczne dla zapisania danych.
LCD_E = 0; // Konieczne zablokowanie transmisji po przeslaniu komunikatu.
}

// Wysylanie danych (RS = 1)
static void LCD_sendData(unsigned char data) {
    LCD_RW = 0;
    LCD_RS = 1;   // Dane
    LCD_E  = 1;
    LCD_DATA = data;
    __delay_us(50);
    LCD_E = 0;
}

// Funkcja print wyswietlajaca kolejne 8-bitowe znaki w petli while, *
//oznacza przypisanie nie wartosci zmiennej lecz jej adresu.
void LCD_print(unsigned char* string){
    while(*string){
    LCD_sendData(*string++);
    }
}

// Funkcja ustawiajaca kursor w wybranym miejscu
void LCD_setCursor(unsigned char row, unsigned char col){
unsigned char address;
if (row == 1){
    address = LCD_CURSOR + LINE1 + col;
}
if (row == 2){
    address = LCD_CURSOR + LINE2 + col;
}
LCD_sendCommand(address);
}

// Funkcja zapisujaca znak (zmienna array) do PAMIECI CGRAM na wybranym slocie od 0 do 7
void LCD_saveCustChar(unsigned char slot, unsigned char *array) {
    unsigned char i;
    LCD_sendCommand(LCD_CUST_CHAR + (slot*8));
    for(i=0;i<8;i++){
        LCD_sendData(array[i]);
    }
}

// Funkcja inicjalizująca wyswietlacz LCD. Wysyla niezbędne komendy jak
//LCD_CONFIG i LCD_ON
void LCD_init(){
__delay_ms(20);
LCD_sendCommand(LCD_CONFIG);
__delay_us(50); // opoznienia wynikają ze specyfikacji
//wyswietlacza i czasu przetwarzania poszczegolnych komend
LCD_sendCommand(LCD_ON);
__delay_us(50);
LCD_sendCommand(LCD_CLEAR);
__delay_ms(2);
}

// Zdefiniowanie znaku niestandardowego w postaci tablicy 8x5 (8 linii po 5 kropek)
// Znak 0: serce
static const unsigned char symbolHeart[8] = {
    0b00000,
    0b00000,
    0b00000,
    0b11011,
    0b11111,
    0b01110,
    0b00100,
    0b00000
};

// Tekst do scrollowania (druga linia). Nie zawiera '\0'.
static const char scrollMsg[] = " NOWA PROMOCJA  ";
#define SCROLL_LEN (sizeof(scrollMsg) - 1)  // pomijamy '\0'

int main(void) {
    TRISB = 0x7FFF; // Ustawienie rejestrow kierunku
    TRISD = 0x0000;
    TRISE = 0x0000;
    
    LCD_init(); // Inicjalizacja wyswietlacza

    LCD_saveCustChar(0, symbolHeart); // Zapisanie znaku 'symbolHeart' do pamieci CGRAM

    // Zmienne stanu animacji
    unsigned char blinkOn     = 0;  // 0 = wylaczony, 1 = wlaczony
    unsigned int scrollOffset = 0;  // indeks przesuniecia dla scrolla

    while (1) {
        // Czyscimy ekran przed nowa klatka animacji
        LCD_sendCommand(LCD_CLEAR);
        __delay_ms(2);

        // Linia 1: mruganie napisu "WITAJ [symbolHeart]"
        if (blinkOn) {
            LCD_setCursor(1, 0);
            LCD_print("WITAJ ");
            LCD_sendData(0);    // Wyswietlamy symbolHeart
            LCD_print("!");
        }
        // Przelaczamy stan mrugania (co 300 ms)
        blinkOn ^= 1;

        // Linia 2: scrollowanie tekstu "  NOWA PROMOCJA  "
        // Ustawiamy kursor na poczatek wiersza 2
        LCD_setCursor(2, 0);
        // Wyswietlamy 16 kolejnych znakow z scrollMsg, poczawszy od scrollOffset
        for (int i = 0; i < 16; i++) {
            int idx = (scrollOffset + i) % SCROLL_LEN;
            LCD_sendData(scrollMsg[idx]);
        }
        // Przesuwamy o jedno w lewo przy nastepnej iteracji
        scrollOffset = (scrollOffset + 1) % SCROLL_LEN;

        // Opoznienie 300 ms przed kolejna klatka
        __delay_ms(300);
    }

    return 0;
}
